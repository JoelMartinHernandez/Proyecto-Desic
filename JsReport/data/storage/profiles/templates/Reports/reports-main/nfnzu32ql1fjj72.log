{"type":"operationStart","subtype":"profile","data":{"_id":"J1AeZhoJoL44n0l2","timestamp":"2024-01-11T15:16:51.504Z","state":"queued","mode":"standard","creationDate":"2024-01-11T15:16:51.509Z","modificationDate":"2024-01-11T15:16:51.509Z","shortid":"dfoIP87","$entitySet":"profiles"},"doDiffs":false,"timestamp":1704986211508,"id":"aprf1al3kx6bcom","previousOperationId":null,"operationId":"y0dyd5najkc6p7z"}
{"type":"log","level":"info","message":"Render request 3 queued for execution and waiting for available worker","previousOperationId":"y0dyd5najkc6p7z","timestamp":1704986211508,"id":"t392ja5rnev85u5"}
{"type":"operationStart","subtype":"render","name":"reports-main","previousOperationId":"y0dyd5najkc6p7z","timestamp":1704986211524,"id":"yv9ioqvl255iocw","previousEventId":"aprf1al3kx6bcom","operationId":"on6mnngnxzko9xz"}
{"type":"log","timestamp":1704986211524,"level":"info","message":"Starting rendering request 3","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"m0d5y1evqtgycqe","previousOperationId":"on6mnngnxzko9xz"}
{"type":"log","timestamp":1704986211524,"level":"info","message":"Rendering template { name: reports-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"tolmqib8iybtg7b","previousOperationId":"on6mnngnxzko9xz"}
{"type":"log","timestamp":1704986211526,"level":"debug","message":"Inline data specified.","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"q4sdctn8ey4a2vj","previousOperationId":"on6mnngnxzko9xz"}
{"type":"log","timestamp":1704986211529,"level":"debug","message":"Executing script reports-script (beforeRender)","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"npcgpwbq682sswg","previousOperationId":"on6mnngnxzko9xz"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1704986211582,"id":"cne59ed8rnokjyf","previousEventId":"yv9ioqvl255iocw","operationId":"nowa2auvmm9ajfb","previousOperationId":"on6mnngnxzko9xz"}
{"type":"operationStart","subtype":"script","name":"scripts reports-script","previousOperationId":"nowa2auvmm9ajfb","timestamp":1704986211582,"id":"yq2gm9w5k1d2wy4","previousEventId":"cne59ed8rnokjyf","operationId":"4su4hrmbaiy9wob"}
{"type":"log","timestamp":1704986211590,"level":"warn","message":"Error when processing render request 3\n(because) error when evaluating custom script /templates/Reports/reports-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchReport() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:8080/api/bus_stop',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchReport() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:8080/api/bus_stop',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:30)\n\n  17 | // add jsreport hook which modifies the report input data\n  18 | async function beforeRender(req, res) {\n> 19 |     req.data.reports = await fetchReport()\n     |                              ^\n  20 |     console.log(req.data.reports)\n  21 | }\n\n(sandbox.js line 33:18)\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchReport (sandbox.js:6:12)\n    at Object.beforeRender (sandbox.js:19:30)\n    at executionFn (C:\\Users\\ratha\\Desktop\\proyectoDesic\\JsReport\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:33:18","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"xh8r608s7ckdlsf","previousOperationId":"4su4hrmbaiy9wob"}
{"type":"log","timestamp":1704986211590,"level":"warn","message":"Rendering request 3 finished with error in 86 ms","meta":{"rootId":"nfnzu32ql1fjj72","id":"nfnzu32ql1fjj72"},"id":"ury718h1biu869b","previousOperationId":"4su4hrmbaiy9wob"}
{"type":"error","timestamp":1704986211598,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchReport() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:8080/api/bus_stop',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchReport() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:8080/api/bus_stop',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:30)\n\n  17 | // add jsreport hook which modifies the report input data\n  18 | async function beforeRender(req, res) {\n> 19 |     req.data.reports = await fetchReport()\n     |                              ^\n  20 |     console.log(req.data.reports)\n  21 | }\n\n(sandbox.js line 33:18)","entity":{"shortid":"vVn-6F0Ydc","name":"reports-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require('https');\n\n// call remote http rest api\nfunction fetchReport() {\n    return new Promise((resolve, reject) => {\n        https.get('http://localhost:8080/api/bus_stop',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        });\n    })\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.reports = await fetchReport()\n    console.log(req.data.reports)\n}"},"property":"content","logged":true,"previousOperationId":"4su4hrmbaiy9wob","id":"xbqh9taxhtgxgfa","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchReport (sandbox.js:6:12)\n    at Object.beforeRender (sandbox.js:19:30)\n    at executionFn (C:\\Users\\ratha\\Desktop\\proyectoDesic\\JsReport\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:33:18","message":"Error when evaluating custom script /templates/Reports/reports-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchReport() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:8080/api/bus_stop',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchReport() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:8080/api/bus_stop',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:30)\n\n  17 | // add jsreport hook which modifies the report input data\n  18 | async function beforeRender(req, res) {\n> 19 |     req.data.reports = await fetchReport()\n     |                              ^\n  20 |     console.log(req.data.reports)\n  21 | }\n\n(sandbox.js line 33:18)"}
